names(TERMS) <- c("SR","text") #SR - source / text - abstract
TERMS$text <- gsub(" - "," ",TERMS$text)
TERMS <- TERMS %>%
mutate(text = tolower(gsub("[^[:alnum:][:blank:]\\-]", "", .data$text)),
text = gsub("-", "__",.data$text))
# remove numbers
# replace every digit with "" (empty) - cleaning numbers
TERMS <- TERMS %>% mutate(text = gsub("[[:digit:]]","",.data$text))
keep.terms=NULL
# keep terms in the vector keep.terms
if (length(keep.terms)>0 & is.character(keep.terms)){
keep.terms <- tolower(keep.terms)
if (Field %in% c("DE","ID")){
kt <- gsub(" ","_",keep.terms)
kt <- gsub("-","__",keep.terms)
} else {
kt <- gsub("-","__",keep.terms)
}
for (i in 1:length(keep.terms)){
TERMS <- TERMS %>%
mutate(text = gsub(keep.terms[i],kt[i],.data$text))
}
}
if (is.null(remove.terms)) remove.terms <- ""
text=TERMS # text is data frame containing the corpus data text
Var="text" # Var is a string indicating the column name
nword=ngrams # nword is a integer vector indicating the ngrams to extract. I.e. nword = c(2,3)
custom_stopwords=tolower(remove.terms)
stopwords <- c(stopwords,"elsevier", "springer", "wiley", "mdpi", "emerald", "originalityvalue", "designmethodologyapproach",
"-", " -", "-present", "-based", "-literature", "-matter")
custom_stopngrams <- c(custom_stopwords,"rights reserved", "john wiley", "john wiley sons", "science bv", "mdpi basel",
"mdpi licensee", "emerald publishing", "taylor francis", "paper proposes",
"we proposes", "paper aims", "articles published", "study aims", "research limitationsimplications")
ngram <- NULL # processing phase
ngrams <- text %>% # variable ngrams is receiving the processed results
drop_na(any_of(Var)) %>% # removing empty values
unnest_tokens(ngram, !!Var, token = "ngrams", n = nword) # Split a column into tokens, flattening the table into one-token-per-row.
ind <- which(substr(ngrams$ngram,1,2) %in% "__")
ngrams$ngram[ind] <- trimws(substr(ngrams$ngram[ind],3,nchar(ngrams$ngram[ind])))
ngrams <- ngrams %>%
separate(.data$ngram, paste("word",1:nword,sep=""), sep = " ")
ngrams <- ngrams %>%
mutate_at(paste("word",seq(1,nword),sep=""), ~gsub("__", "-",.)) %>%
mutate_at(paste("word",seq(1,nword),sep=""), ~gsub("_", " ",.))
ngrams <- ngrams %>% dplyr::filter(if_all(starts_with("word"), ~ !.x %in% stopwords)) ## removing stop words (generic)
# removing customized stop words
ngrams <- ngrams %>%
unite(ngram, paste("word",1:nword,sep=""), sep = " ") %>%
dplyr::filter(!.data$ngram %in% custom_stopngrams) %>%
mutate(ngram = toupper(.data$ngram))
# Merging synonyms in the vector synonyms
if (length(synonyms)>0 & is.character(synonyms)){
s <- strsplit(toupper(synonyms),";")
snew <- trimws(unlist(lapply(s,function(l) l[1])))
sold <- (lapply(s,function(l){
l <- trimws(l[-1])
}))
for (i in 1:length(s)){
ngrams$ngram[ngrams$ngram %in% unlist(sold[[i]])] <- snew[i]
}
}
TERMS<-ngrams
ngrams=2
TERMS <- TERMS %>%
dplyr::filter(!(.data$ngram %in% paste(rep("NA",ngrams),sep="",collapse=" "))) %>%
group_by(.data$SR) %>%
summarize(text = paste(.data$ngram, collapse=";"))
# assign the vector to the bibliographic data frame
col_name <- paste(Field,"_TM",sep="")
M <- M[!names(M) %in% col_name]
M <- TERMS %>%
right_join(M, by = "SR")
names(M)[which(names(M) %in% "text")] <- col_name
# display results
if (verbose==TRUE){
s <- tableTag(M,col_name)
if (length(s>25)){print(s[1:25])}else{print(s)}
}
class(M) <- c("bibliometrixDB", "data.frame")
row.names(M) <- M$SR
values$M=M
field=paste("AB","_TM",sep="")
View(M)
fieldByYear <- function(M,
field = "ID",
timespan = NULL,
min.freq = 2,
n.items = 5,
labelsize = NULL,
remove.terms = NULL,
synonyms = NULL,
dynamic.plot = FALSE,
graph = TRUE) {
A <- cocMatrix(M, Field = field, binary = FALSE, remove.terms = remove.terms, synonyms = synonyms)
n <- colSums(as.array(A))
#A=tdIdf(A)
trend_med <- apply(A, 2, function(x) {
round(quantile(rep(M$PY, x), c(0.25,0.50,0.75), na.rm=TRUE))
})
trend_med <- as_tibble(t(trend_med)) %>%
rename("year_q1"='25%', "year_med"='50%', "year_q3"='75%') %>%
mutate(item=rownames(t(trend_med)), freq=n) %>%
relocate(c(.data$item,.data$freq), .data$year_q1)
# if timespan is null, timespan is set to the whole period
if (is.null(timespan) | length(timespan)!=2){
timespan <- as.numeric(range(trend_med$year_med, na.rm = TRUE))
}
df <- trend_med %>%
mutate(item = tolower(.data$item)) %>%
group_by(.data$year_med) %>%
arrange(desc(.data$freq), .data$item) %>%
arrange(desc(.data$year_med)) %>%
dplyr::slice_head(n=n.items) %>%
dplyr::filter(.data$freq >= min.freq) %>%
dplyr::filter(between(.data$year_med, timespan[1],timespan[2])) %>%
mutate(item = fct_reorder(.data$item, .data$freq))
data("logo",envir=environment())
logo <- grid::rasterGrob(logo,interpolate = TRUE)
yrange <- range(unlist(df[,which(regexpr("year",names(df))>-1)]))
x <- c(0+0.5,0.05+length(levels(df$item))*0.125)+1
y <- c(yrange[2]-0.02-diff(yrange)*0.125,yrange[2]-0.02)
g <- ggplot(df, aes(x=.data$item, y=.data$year_med,
text = paste("Term: ", .data$item,"\nYear: ",
.data$year_med ,"\nTerm frequency: ",.data$freq )))+
geom_point(aes(size = .data$freq), alpha=0.6, color="dodgerblue4")+
scale_size(range=c(2,6))+
#scale_alpha(range=c(0.3,1))+
scale_y_continuous(breaks = seq(min(df$year_q1),max(df$year_q3), by=2))+
guides(size = guide_legend(order = 1, "Term frequency"), alpha = guide_legend(order = 2, "Term frequency"))+
theme(legend.position = 'right'
#,aspect.ratio = 1
,text = element_text(color = "#444444")
,panel.background = element_rect(fill = '#FFFFFF')
,panel.grid.major.x = element_blank()
,panel.grid.major.y = element_line(color = 'grey95')
,plot.title = element_text(size = 24)
,axis.title = element_text(size = 14, color = '#555555')
,axis.title.y = element_text(vjust = 1, angle = 90, face="bold")
,axis.title.x = element_text(hjust = .95)
,axis.text.x = element_text(face="bold", angle = 90)#, size=labelsize)
,axis.text.y = element_text(face="bold",)
,axis.line.x = element_line(color="black", size=0.5)
) + annotation_custom(logo, xmin = x[1], xmax = x[2], ymin = y[1], ymax = y[2])
if (!isTRUE(dynamic.plot)){
g <- g+geom_vline(xintercept=nrow(df)-(which(c(diff(df$year_med))==-1)-0.5), color="grey70",alpha=0.6, linetype=6)+
geom_point(aes(y=.data$year_q1), alpha=0.6, size = 3, color="royalblue4", shape="|")+
geom_point(aes(y=.data$year_q3), alpha=0.6, size = 3, color="royalblue4", shape="|")
}
g <- g+
labs(title="Trend Topics",
x="Term",
y="Year")+
geom_segment(data=df, aes(x = .data$item, y = .data$year_q1, xend = .data$item, yend = .data$year_q3), size=1.0, color="royalblue4", alpha=0.3) +
coord_flip()
if (isTRUE(graph)) {
print(g)
}
results <- list(df = trend_med, df_graph = df, graph = g)
return(results)
}
values$trendTopics <- fieldByYear(M, field = field, timespan = c(min(values$M$PY,na.rm=T),max(values$M$PY,na.rm=T)), min.freq = 7,
n.items = 3, remove.terms = remove.terms, synonyms = synonyms,
dynamic.plot=TRUE, graph = FALSE)
g=values$trendTopics$graph
values$trendTopics <- fieldByYear(M, field = field, timespan = c(min(values$M$PY,na.rm=T),max(values$M$PY,na.rm=T)), min.freq = 7,
n.items = 3, remove.terms = remove.terms, synonyms = synonyms,
dynamic.plot=TRUE, graph = FALSE)
values <- Merging
remove.terms <- trimws(unlist(strsplit(readr::read_lines("bigrama-filter-words.txt"), ",")))
syn.terms <- readr::read_lines("word-dynamics-synonyms.txt")
syn.terms <- gsub(",",";",syn.terms) #using function gsub because it needs to translate it to a specific pattern
### load file with synonyms
synonyms <- trimws(syn.terms)
# Defining variables - choosing options and preparing graph
M=values
Field = "AB"
stemming = FALSE
verbose = FALSE
ngrams=2
data("stopwords",envir=environment())
data("stop_words", envir=environment(), package = "tidytext")
stop_words <- stop_words %>% as.data.frame() # dataframe for all stop words
if (ngrams == 2){remove.terms <- c(remove.terms,stopwords$bigrams)}
language = "english"
switch(language,
english={stopwords=(stop_words$word)},
italian={stopwords=stopwords$it},
german={stopwords=stopwords$de},
french={stopwords=stopwords$fr},
spanish={stopwords=stopwords$es}
)
stopwords <- tolower(stopwords)
# remove all special characters (except "-" becoming "_")
TERMS <- M %>%
select(.data$SR,!!Field)
names(TERMS) <- c("SR","text") #SR - source / text - abstract
TERMS$text <- gsub(" - "," ",TERMS$text)
TERMS <- TERMS %>%
mutate(text = tolower(gsub("[^[:alnum:][:blank:]\\-]", "", .data$text)),
text = gsub("-", "__",.data$text))
# remove numbers
# replace every digit with "" (empty) - cleaning numbers
TERMS <- TERMS %>% mutate(text = gsub("[[:digit:]]","",.data$text))
keep.terms=NULL
# keep terms in the vector keep.terms
if (length(keep.terms)>0 & is.character(keep.terms)){
keep.terms <- tolower(keep.terms)
if (Field %in% c("DE","ID")){
kt <- gsub(" ","_",keep.terms)
kt <- gsub("-","__",keep.terms)
} else {
kt <- gsub("-","__",keep.terms)
}
for (i in 1:length(keep.terms)){
TERMS <- TERMS %>%
mutate(text = gsub(keep.terms[i],kt[i],.data$text))
}
}
if (is.null(remove.terms)) remove.terms <- ""
text=TERMS # text is data frame containing the corpus data text
Var="text" # Var is a string indicating the column name
nword=ngrams # nword is a integer vector indicating the ngrams to extract. I.e. nword = c(2,3)
custom_stopwords=tolower(remove.terms)
stopwords <- c(stopwords,"elsevier", "springer", "wiley", "mdpi", "emerald", "originalityvalue", "designmethodologyapproach",
"-", " -", "-present", "-based", "-literature", "-matter")
custom_stopngrams <- c(custom_stopwords,"rights reserved", "john wiley", "john wiley sons", "science bv", "mdpi basel",
"mdpi licensee", "emerald publishing", "taylor francis", "paper proposes",
"we proposes", "paper aims", "articles published", "study aims", "research limitationsimplications")
ngram <- NULL # processing phase
ngrams <- text %>% # variable ngrams is receiving the processed results
drop_na(any_of(Var)) %>% # removing empty values
unnest_tokens(ngram, !!Var, token = "ngrams", n = nword) # Split a column into tokens, flattening the table into one-token-per-row.
ind <- which(substr(ngrams$ngram,1,2) %in% "__")
ngrams$ngram[ind] <- trimws(substr(ngrams$ngram[ind],3,nchar(ngrams$ngram[ind])))
ngrams <- ngrams %>%
separate(.data$ngram, paste("word",1:nword,sep=""), sep = " ")
ngrams <- ngrams %>%
mutate_at(paste("word",seq(1,nword),sep=""), ~gsub("__", "-",.)) %>%
mutate_at(paste("word",seq(1,nword),sep=""), ~gsub("_", " ",.))
ngrams <- ngrams %>% dplyr::filter(if_all(starts_with("word"), ~ !.x %in% stopwords)) ## removing stop words (generic)
# removing customized stop words
ngrams <- ngrams %>%
unite(ngram, paste("word",1:nword,sep=""), sep = " ") %>%
dplyr::filter(!.data$ngram %in% custom_stopngrams) %>%
mutate(ngram = toupper(.data$ngram))
# Merging synonyms in the vector synonyms
if (length(synonyms)>0 & is.character(synonyms)){
s <- strsplit(toupper(synonyms),";")
snew <- trimws(unlist(lapply(s,function(l) l[1])))
sold <- (lapply(s,function(l){
l <- trimws(l[-1])
}))
for (i in 1:length(s)){
ngrams$ngram[ngrams$ngram %in% unlist(sold[[i]])] <- snew[i]
}
}
TERMS<-ngrams
ngrams=2
TERMS <- TERMS %>%
dplyr::filter(!(.data$ngram %in% paste(rep("NA",ngrams),sep="",collapse=" "))) %>%
group_by(.data$SR) %>%
summarize(text = paste(.data$ngram, collapse=";"))
# assign the vector to the bibliographic data frame
col_name <- paste(Field,"_TM",sep="")
M <- M[!names(M) %in% col_name]
M <- TERMS %>%
right_join(M, by = "SR")
names(M)[which(names(M) %in% "text")] <- col_name
# display results
if (verbose==TRUE){
s <- tableTag(M,col_name)
if (length(s>25)){print(s[1:25])}else{print(s)}
}
class(M) <- c("bibliometrixDB", "data.frame")
row.names(M) <- M$SR
values$M=M
field=paste("AB","_TM",sep="")
fieldByYear <- function(M,
field = "ID",
timespan = NULL,
min.freq = 2,
n.items = 5,
labelsize = NULL,
remove.terms = NULL,
synonyms = NULL,
dynamic.plot = FALSE,
graph = TRUE) {
A <- cocMatrix(M, Field = field, binary = FALSE, remove.terms = remove.terms, synonyms = synonyms)
n <- colSums(as.array(A))
#A=tdIdf(A)
trend_med <- apply(A, 2, function(x) {
round(quantile(rep(M$PY, x), c(0.25,0.50,0.75), na.rm=TRUE))
})
trend_med <- as_tibble(t(trend_med)) %>%
rename("year_q1"='25%', "year_med"='50%', "year_q3"='75%') %>%
mutate(item=rownames(t(trend_med)), freq=n) %>%
relocate(c(.data$item,.data$freq), .data$year_q1)
# if timespan is null, timespan is set to the whole period
if (is.null(timespan) | length(timespan)!=2){
timespan <- as.numeric(range(trend_med$year_med, na.rm = TRUE))
}
df <- trend_med %>%
mutate(item = tolower(.data$item)) %>%
group_by(.data$year_med) %>%
arrange(desc(.data$freq), .data$item) %>%
arrange(desc(.data$year_med)) %>%
dplyr::slice_head(n=n.items) %>%
dplyr::filter(.data$freq >= min.freq) %>%
dplyr::filter(between(.data$year_med, timespan[1],timespan[2])) %>%
mutate(item = fct_reorder(.data$item, .data$freq))
data("logo",envir=environment())
logo <- grid::rasterGrob(logo,interpolate = TRUE)
yrange <- range(unlist(df[,which(regexpr("year",names(df))>-1)]))
x <- c(0+0.5,0.05+length(levels(df$item))*0.125)+1
y <- c(yrange[2]-0.02-diff(yrange)*0.125,yrange[2]-0.02)
g <- ggplot(df, aes(x=.data$item, y=.data$year_med,
text = paste("Term: ", .data$item,"\nYear: ",
.data$year_med ,"\nTerm frequency: ",.data$freq )))+
geom_point(aes(size = .data$freq), alpha=0.6, color="dodgerblue4")+
scale_size(range=c(2,6))+
#scale_alpha(range=c(0.3,1))+
scale_y_continuous(breaks = seq(min(df$year_q1),max(df$year_q3), by=2))+
guides(size = guide_legend(order = 1, "Term frequency"), alpha = guide_legend(order = 2, "Term frequency"))+
theme(legend.position = 'right'
#,aspect.ratio = 1
,text = element_text(color = "#444444")
,panel.background = element_rect(fill = '#FFFFFF')
,panel.grid.major.x = element_blank()
,panel.grid.major.y = element_line(color = 'grey95')
,plot.title = element_text(size = 24)
,axis.title = element_text(size = 14, color = '#555555')
,axis.title.y = element_text(vjust = 1, angle = 90, face="bold")
,axis.title.x = element_text(hjust = .95)
,axis.text.x = element_text(face="bold", angle = 90)#, size=labelsize)
,axis.text.y = element_text(face="bold",)
,axis.line.x = element_line(color="black", size=0.5)
) + annotation_custom(logo, xmin = x[1], xmax = x[2], ymin = y[1], ymax = y[2])
if (!isTRUE(dynamic.plot)){
g <- g+geom_vline(xintercept=nrow(df)-(which(c(diff(df$year_med))==-1)-0.5), color="grey70",alpha=0.6, linetype=6)+
geom_point(aes(y=.data$year_q1), alpha=0.6, size = 3, color="royalblue4", shape="|")+
geom_point(aes(y=.data$year_q3), alpha=0.6, size = 3, color="royalblue4", shape="|")
}
g <- g+
labs(title="Trend Topics",
x="Term",
y="Year")+
geom_segment(data=df, aes(x = .data$item, y = .data$year_q1, xend = .data$item, yend = .data$year_q3), size=1.0, color="royalblue4", alpha=0.3) +
coord_flip()
if (isTRUE(graph)) {
print(g)
}
results <- list(df = trend_med, df_graph = df, graph = g)
return(results)
}
min(values$M$PY,na.rm=T)
M2=M
values$trendTopics <- fieldByYear(M2, field = field, timespan = c(min(values$M$PY,na.rm=T),
max(values$M$PY,na.rm=T)), min.freq = 7,
n.items = 3, remove.terms = remove.terms, synonyms = synonyms,
dynamic.plot=TRUE, graph = FALSE)
values$trendTopics
field=paste("AB","_TM",sep="")
timespan = c(min(values$M$PY,na.rm=T),max(values$M$PY,na.rm=T))
min.freq = 7
n.items = 3
A <- cocMatrix(M, Field = field, binary = FALSE, remove.terms = remove.terms, synonyms = synonyms)
n <- colSums(as.array(A))
trend_med <- apply(A, 2, function(x) {
round(quantile(rep(M$PY, x), c(0.25,0.50,0.75), na.rm=TRUE))
})
trend_med <- as_tibble(t(trend_med)) %>%
rename("year_q1"='25%', "year_med"='50%', "year_q3"='75%') %>%
mutate(item=rownames(t(trend_med)), freq=n) %>%
relocate(c(.data$item,.data$freq), .data$year_q1)
df <- trend_med %>%
mutate(item = tolower(.data$item)) %>%
group_by(.data$year_med) %>%
arrange(desc(.data$freq), .data$item) %>%
arrange(desc(.data$year_med)) %>%
dplyr::slice_head(n=n.items) %>%
dplyr::filter(.data$freq >= min.freq) %>%
dplyr::filter(between(.data$year_med, timespan[1],timespan[2])) %>%
mutate(item = fct_reorder(.data$item, .data$freq))
library(forcats)
A <- cocMatrix(M, Field = field, binary = FALSE, remove.terms = remove.terms, synonyms = synonyms)
n <- colSums(as.array(A))
trend_med <- apply(A, 2, function(x) {
round(quantile(rep(M$PY, x), c(0.25,0.50,0.75), na.rm=TRUE))
})
trend_med <- as_tibble(t(trend_med)) %>%
rename("year_q1"='25%', "year_med"='50%', "year_q3"='75%') %>%
mutate(item=rownames(t(trend_med)), freq=n) %>%
relocate(c(.data$item,.data$freq), .data$year_q1)
df <- trend_med %>%
mutate(item = tolower(.data$item)) %>%
group_by(.data$year_med) %>%
arrange(desc(.data$freq), .data$item) %>%
arrange(desc(.data$year_med)) %>%
dplyr::slice_head(n=n.items) %>%
dplyr::filter(.data$freq >= min.freq) %>%
dplyr::filter(between(.data$year_med, timespan[1],timespan[2])) %>%
mutate(item = fct_reorder(.data$item, .data$freq))
data("logo",envir=environment())
yrange <- range(unlist(df[,which(regexpr("year",names(df))>-1)]))
x <- c(0+0.5,0.05+length(levels(df$item))*0.125)+1
y <- c(yrange[2]-0.02-diff(yrange)*0.125,yrange[2]-0.02)
g <- ggplot(df, aes(x=.data$item, y=.data$year_med,
text = paste("Term: ", .data$item,"\nYear: ",
.data$year_med ,"\nTerm frequency: ",.data$freq )))+
geom_point(aes(size = .data$freq), alpha=0.6, color="dodgerblue4")+
scale_size(range=c(2,6))+
#scale_alpha(range=c(0.3,1))+
scale_y_continuous(breaks = seq(min(df$year_q1),max(df$year_q3), by=2))+
guides(size = guide_legend(order = 1, "Term frequency"), alpha = guide_legend(order = 2, "Term frequency"))+
theme(legend.position = 'right'
#,aspect.ratio = 1
,text = element_text(color = "#444444")
,panel.background = element_rect(fill = '#FFFFFF')
,panel.grid.major.x = element_blank()
,panel.grid.major.y = element_line(color = 'grey95')
,plot.title = element_text(size = 24)
,axis.title = element_text(size = 14, color = '#555555')
,axis.title.y = element_text(vjust = 1, angle = 90, face="bold")
,axis.title.x = element_text(hjust = .95)
,axis.text.x = element_text(face="bold", angle = 90)#, size=labelsize)
,axis.text.y = element_text(face="bold",)
,axis.line.x = element_line(color="black", size=0.5)
) + annotation_custom(logo, xmin = x[1], xmax = x[2], ymin = y[1], ymax = y[2])
g <- ggplot(df, aes(x=.data$item, y=.data$year_med,
text = paste("Term: ", .data$item,"\nYear: ",
.data$year_med ,"\nTerm frequency: ",.data$freq )))+
geom_point(aes(size = .data$freq), alpha=0.6, color="dodgerblue4")+
scale_size(range=c(2,6))+
#scale_alpha(range=c(0.3,1))+
scale_y_continuous(breaks = seq(min(df$year_q1),max(df$year_q3), by=2))+
guides(size = guide_legend(order = 1, "Term frequency"), alpha = guide_legend(order = 2, "Term frequency"))+
theme(legend.position = 'right'
#,aspect.ratio = 1
,text = element_text(color = "#444444")
,panel.background = element_rect(fill = '#FFFFFF')
,panel.grid.major.x = element_blank()
,panel.grid.major.y = element_line(color = 'grey95')
,plot.title = element_text(size = 24)
,axis.title = element_text(size = 14, color = '#555555')
,axis.title.y = element_text(vjust = 1, angle = 90, face="bold")
,axis.title.x = element_text(hjust = .95)
,axis.text.x = element_text(face="bold", angle = 90)#, size=labelsize)
,axis.text.y = element_text(face="bold",)
,axis.line.x = element_line(color="black", size=0.5))
plot(g)
# Specifying DPI resolution - dots per inch
filename = paste("TrendingTopics", Sys.Date(), ".png", sep="")
ggsave(filename = filename, plot = g, dpi = 300, height = 20, width = 16, units="cm", bg="white")
g <- g+geom_vline(xintercept=nrow(df)-(which(c(diff(df$year_med))==-1)-0.5), color="grey70",alpha=0.6, linetype=6)+
geom_point(aes(y=.data$year_q1), alpha=0.6, size = 3, color="royalblue4", shape="|")+
geom_point(aes(y=.data$year_q3), alpha=0.6, size = 3, color="royalblue4", shape="|")
g <- g+
labs(title="Trend Topics",
x="Term",
y="Year")+
geom_segment(data=df, aes(x = .data$item, y = .data$year_q1, xend = .data$item, yend = .data$year_q3), size=1.0, color="royalblue4", alpha=0.3) +
coord_flip()
plot(g)
# Specifying DPI resolution - dots per inch
filename = paste("TrendingTopics", Sys.Date(), ".png", sep="")
ggsave(filename = filename, plot = g, dpi = 300, height = 20, width = 16, units="cm", bg="white")
g <- g+
labs(title="",
x="",
y="")+
geom_segment(data=df, aes(x = .data$item, y = .data$year_q1, xend = .data$item, yend = .data$year_q3), size=1.0, color="royalblue4", alpha=0.3) +
coord_flip()
plot(g)
# Specifying DPI resolution - dots per inch
filename = paste("TrendingTopics", Sys.Date(), ".png", sep="")
ggsave(filename = filename, plot = g, dpi = 300, height = 20, width = 16, units="cm", bg="white")
timespan
timespan[1]
g <- ggplot(df, aes(x=.data$item, y=.data$year_med,
text = paste("Term: ", .data$item,"\nYear: ",
.data$year_med ,"\nTerm frequency: ",.data$freq )))+
geom_point(aes(size = .data$freq), alpha=0.6, color="dodgerblue4")+
scale_size(range=c(2,6))+
#scale_alpha(range=c(0.3,1))+
scale_y_continuous(breaks = seq(timespan[1],timespan[2], by=1))+
guides(size = guide_legend(order = 1, "Term frequency"), alpha = guide_legend(order = 2, "Term frequency"))+
theme(legend.position = 'right'
#,aspect.ratio = 1
,text = element_text(color = "#444444")
,panel.background = element_rect(fill = '#FFFFFF')
,panel.grid.major.x = element_blank()
,panel.grid.major.y = element_line(color = 'grey95')
,plot.title = element_text(size = 24)
,axis.title = element_text(size = 14, color = '#555555')
,axis.title.y = element_text(vjust = 1, angle = 90, face="bold")
,axis.title.x = element_text(hjust = .95)
,axis.text.x = element_text(face="bold", angle = 90)#, size=labelsize)
,axis.text.y = element_text(face="bold",)
,axis.line.x = element_line(color="black", size=0.5))
g <- g+geom_vline(xintercept=nrow(df)-(which(c(diff(df$year_med))==-1)-0.5), color="grey70",alpha=0.6, linetype=6)+
geom_point(aes(y=.data$year_q1), alpha=0.6, size = 3, color="royalblue4", shape="|")+
geom_point(aes(y=.data$year_q3), alpha=0.6, size = 3, color="royalblue4", shape="|")
g <- g+
labs(title="",
x="",
y="")+
geom_segment(data=df, aes(x = .data$item, y = .data$year_q1, xend = .data$item, yend = .data$year_q3), size=1.0, color="royalblue4", alpha=0.3) +
coord_flip()
plot(g)
# Specifying DPI resolution - dots per inch
filename = paste("TrendingTopics", Sys.Date(), ".png", sep="")
ggsave(filename = filename, plot = g, dpi = 300, height = 20, width = 16, units="cm", bg="white")
